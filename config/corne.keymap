/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        toch {
            bindings = <&kp KP_N1>;
            key-positions = <16 19>;
        };

        lay3 {
            bindings = <&to 3>;
            key-positions = <10 11>;
        };

        dot {
            bindings = <&kp KP_N2>;
            key-positions = <15 20>;
        };

        ques {
            bindings = <&kp KP_N3>;
            key-positions = <14 21>;
        };

        altshift {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <38 39>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC   &kp Q            &kp W            &kp E              &kp R                &kp T        &kp Y      &kp U                 &kp I               &kp O             &kp P                &kp LBKT
&kp TAB   &hrm LEFT_WIN A  &hrm LEFT_ALT S  &hrm LEFT_SHIFT D  &hrm LEFT_CONTROL F  &kp G        &kp H      &hrm RIGHT_CONTROL J  &hrm RIGHT_SHIFT K  &hrm RIGHT_ALT L  &hrm RIGHT_WIN SEMI  &kp SQT
&kp CLCK  &kp Z            &kp X            &kp C              &kp V                &kp B        &kp N      &kp M                 &kp COMMA           &kp DOT           &kp FSLH             &kp RBKT
                                            &kp DEL            &to 1                &kp ENTER    &kp SPACE  &to 2                 &kp BSPC
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC    &kp LBKT                        &kp HOME                  &kp UP_ARROW                &kp PG_UP         &kp RBKT                 &kp SPACE  &kp SPACE     &kp SPACE           &kp SPACE     &kp SPACE    &none
&kp TAB    &hrm LEFT_WIN LEFT_PARENTHESIS  &hrm LEFT_ALT LEFT_ARROW  &hrm LEFT_SHIFT DOWN_ARROW  &hrm LCTRL RIGHT  &kp RIGHT_PARENTHESIS    &kp SPACE  &hrm RCTRL A  &hrm RIGHT_SHIFT A  &hrm RIGHT A  &hrm RWIN A  &trans
&kp GRAVE  &kp LESS_THAN                   &kp END                   &kp INS                     &kp PG_DN         &kp GREATER_THAN         &kp SPACE  &kp SPACE     &kp SPACE           &kp SPACE     &kp SPACE    &trans
                                                                     &kp DEL                     &to 0             &kp ENTER                &kp SPACE  &to 2         &kp BACKSPACE
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp SPACE               &kp SPACE               &kp SPACE                 &kp SPACE            &kp SPACE    &kp SPACE  &kp SPACE      &kp SPACE            &kp MINUS          &kp EQUAL          &kp BSLH
&kp TAB     &hrm LEFT_WIN NUMBER_1  &hrm LEFT_ALT NUMBER_2  &hrm LEFT_SHIFT NUMBER_3  &hrm LCTRL NUMBER_4  &kp N5       &kp N6     &hrm RCTRL N7  &hrm RIGHT_SHIFT N8  &hrm RIGHT_ALT N9  &hrm RIGHT_WIN N0  &none
&kp GRAVE   &kp SPACE               &kp SPACE               &kp SPACE                 &kp SPACE            &kp SPACE    &none      &kp SPACE      &kp SPACE            &none              &none              &none
                                                            &kp DEL                   &to 1                &kp RET      &kp SPACE  &to 0          &kp BSPC
            >;
        };

        layer_3 {
            bindings = <
&none       &none         &none         &none         &none         &none           &none   &none   &none   &none    &none    &none
&none       &none         &kp LCTRL     &kp LALT      &kp LSHFT     &kp DEL         &kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
                                        &none         &trans        &none           &none   &trans  &none
            >;
        };
    };
};
